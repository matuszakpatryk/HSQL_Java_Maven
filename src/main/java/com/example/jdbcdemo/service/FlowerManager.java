package com.example.jdbcdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.sound.midi.SysexMessage;

import com.example.jdbcdemo.domain.Flower;

public class FlowerManager {

	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableFlower = "CREATE TABLE Flower(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), priceNetto double, vat int, type varchar(20))";

	private PreparedStatement addFlowerStmt;
	private PreparedStatement deleteAllFlowersStmt;
	private PreparedStatement getAllFlowersStmt;

	private Statement statement;

	public FlowerManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Flower".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableFlower);

			addFlowerStmt = connection
					.prepareStatement("INSERT INTO Flower (name, priceNetto, vat, type) VALUES (?, ?, ?, ?)");
			deleteAllFlowersStmt = connection
					.prepareStatement("DELETE FROM Flower");
			getAllFlowersStmt = connection
					.prepareStatement("SELECT id, name, priceNetto, vat, type FROM Flower");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connection;
	}
	
	

	void clearFlowers() {
		try {
			deleteAllFlowersStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addFlower(Flower flower) {
		int count = 0;
		try {
			addFlowerStmt.setString(1, flower.getName());
			addFlowerStmt.setDouble(2, flower.getPriceNetto());
			addFlowerStmt.setInt(3, flower.getVat());
			addFlowerStmt.setString(4, flower.getType());

			count = addFlowerStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Flower> getAllFlowers() {
		List<Flower> flowers = new ArrayList<Flower>();

		try {
			ResultSet rs = getAllFlowersStmt.executeQuery();

			while (rs.next()) {
				Flower f = new Flower();
				f.setId(rs.getInt("id"));
				f.setName(rs.getString("name"));
				f.setPriceNetto(rs.getInt("priceNetto"));
				f.setVat(rs.getInt("vat"));
				f.setType(rs.getString("type"));
				flowers.add(f);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return flowers;
	}
	
	

}
